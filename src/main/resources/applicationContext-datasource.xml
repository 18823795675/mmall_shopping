<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:aop="http://www.springframework.org/schema/aop"
       xmlns:tx="http://www.springframework.org/schema/tx"
       xmlns:jdbc="http://www.springframework.org/schema/jdbc"
       xmlns:context="http://www.springframework.org/schema/context"
       xsi:schemaLocation="
    http://www.springframework.org/schema/context
    http://www.springframework.org/schema/context/spring-context.xsd
    http://www.springframework.org/schema/beans
    http://www.springframework.org/schema/beans/spring-beans.xsd
    http://www.springframework.org/schema/tx
    http://www.springframework.org/schema/tx/spring-tx.xsd
    http://www.springframework.org/schema/aop
    http://www.springframework.org/schema/aop/spring-aop.xsd">

    <context:component-scan base-package="com.mmall" annotation-config="true"/>

    <!--
        配置我们的spring文件的时候，我们把里面的常量进行分离，分离到datasource.properties里面
    -->
    <bean id="placeholderConfigurer"
          class="org.springframework.beans.factory.config.PropertyPlaceholderConfigurer">
        <property name="order" value="2"/>
        <property name="ignoreUnresolvablePlaceholders" value="true"/>
        <property name="locations">
            <list>
                <value>classpath:datasource.properties</value>
            </list>
        </property>
        <property name="fileEncoding" value="utf-8"/>
    </bean>

    <!--
        数据库用到的一个jdbc的连接池
    -->
    <bean id="datasource"
          class="org.apache.commons.dbcp.BasicDataSource"
          destroy-method="close">
        <property name="driverClassName" value="${db.driverClassName}"/>
        <property name="url" value="${db.url}"/>
        <property name="username" value="${db.username}"/>
        <property name="password" value="${db.password}"/>
        <!--连接池启动时的初始值-->
        <property name="initialSize" value="${db.initialSize}"/>
        <!--连接池的最大值-->
        <property name="maxActive" value="${db.maxActive}"/>
        <!--最大空闲值，当经过一个高峰时间后，连接池可以慢慢的将已经用不到的连接慢慢释放一部分，一直减少到maxIdle为止-->
        <property name="maxIdle" value="${db.maxIdle}"/>
        <!--最小空闲值，当空闲的连接少于阀值时，线程池就会预申请去一些连接，以免洪峰来时来不及申请-->
        <property name="minIdle" value="${db.minIdle}"/>
        <!--最大建立连接等待时间，如果超过此时间将接收到异常，设置为-1表示无限制-->
        <property name="maxWait" value="${db.maxWait}"/>
        <!--给出一个简单的sql语句进行验证-->
        <!--<property name="validationQuery" value="select getdata()"/>-->
        <property name="defaultAutoCommit" value="${db.defaultAutoCommit}"/>
        <!--回收被遗弃的（一般是忘了释放的）数据库连接到连接池中-->
        <!--<property name="removeAbandoned" value="true"/>-->
        <!--数据库连接过多长时间不用将被视为被遗弃而收回连接池中-->
        <!--<property name="removeAbandonedTimeout" value="120"/>-->
        <!--连接的超时时间，默认半小时-->
        <property name="minEvictableIdleTimeMillis" value="${db.minEvictableIdleTimeMillis}"/>
    </bean>


    <!--
        ref="datasource"指的是上面的那个bean的id
        <property name="mapperLocations" value="classpath*:mappers/*Mapper.xml"/>读取mysql的配置实现
    -->
    <bean id="sqlSessionFactory"
        class="org.mybatis.spring.SqlSessionFactoryBean">
        <property name="dataSource" ref="datasource"/>
        <property name="mapperLocations" value="classpath*:mappers/*Mapper.xml"/>

        <!--
            分页插件：在maven的pom.xml文件里面要引用mybatis分页的插件jar
        -->
        <property name="plugins">
            <array>
                <bean class="com.github.pagehelper.PageHelper">
                    <property name="properties">
                        <value>
                            dialect=mysql
                        </value>
                    </property>
                </bean>
            </array>
        </property>
    </bean>

    <!--扫描dao层-->
    <bean id="mapperScannerConfigurer"
            class="org.mybatis.spring.mapper.MapperScannerConfigurer">
        <property name="basePackage" value="com.mmall.dao"/>
    </bean>

    <!--使用@Transactional进行声明式事物管理需要申明下面这一行-->
    <tx:annotation-driven transaction-manager="dataSourceTransactionManager" proxy-target-class="true"/>

    <!--事物管理-->
    <bean id="dataSourceTransactionManager"
            class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
        <property name="dataSource" ref="datasource"/>
        <!--当提交失败的时候事物回滚-->
        <property name="rollbackOnCommitFailure" value="true"/>
    </bean>
</beans>